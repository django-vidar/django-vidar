# Generated by Django 5.1.6 on 2025-03-03 13:15

import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import positions.fields
import vidar.helpers.channel_helpers
import vidar.helpers.extrafile_helpers
import vidar.helpers.video_helpers
import vidar.helpers.model_helpers
import vidar.services.crontab_services
import vidar.json_encoders
import vidar.storages
import vidar.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('provider_object_id', models.CharField(max_length=250)),
                ('active', models.BooleanField(default=True)),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('download_videos', models.BooleanField(default=True, help_text='Should videos be downloaded?')),
                ('scanner_limit', models.PositiveIntegerField(default=5, help_text='Limit how many videos the system scans every time for this channel, How many potential videos could this channel put out in a single day?')),
                ('title_skips', models.TextField(blank=True, help_text='If any of these words appear in the title, do not download the video. ONE PER LINE. i.e. #shorts', verbose_name='Skip DL by Title contains')),
                ('quality', models.PositiveIntegerField(blank=True, choices=vidar.models.PossibleQualities, null=True)),
                ('banner', models.ImageField(blank=True, max_length=500, null=True, storage=vidar.storages.vidar_storage, upload_to=vidar.helpers.channel_helpers.upload_to_banner)),
                ('thumbnail', models.ImageField(blank=True, max_length=500, null=True, storage=vidar.storages.vidar_storage, upload_to=vidar.helpers.channel_helpers.upload_to_thumbnail)),
                ('tvart', models.ImageField(blank=True, max_length=500, null=True, storage=vidar.storages.vidar_storage, upload_to=vidar.helpers.channel_helpers.upload_to_tvart)),
                ('title_forces', models.TextField(blank=True, help_text='If any of these words appear in the title, force download the video regardless of settings. ONE PER LINE. Overrides all other restriction settings.', verbose_name='Force DL by Title contains')),
                ('full_archive', models.BooleanField(default=False, help_text='Enabling this setting will cause the system to download all possible videos for this channel regardless of other settings.')),
                ('scanner_crontab', models.CharField(blank=True, help_text='minute, hour, day of month, month, day of week', max_length=50)),
                ('last_scanned', models.DateTimeField(blank=True, null=True)),
                ('playback_speed', models.CharField(blank=True, choices=vidar.helpers.model_helpers.PlaybackSpeed.choices, max_length=10, null=True)),
                ('store_videos_by_year_separation', models.BooleanField(default=True)),
                ('download_comments_with_video', models.BooleanField(default=False, help_text='Should video comments be downloaded?')),
                ('download_comments_during_scan', models.BooleanField(default=False, help_text='Should video comments be downloaded during indexing of videos?')),
                ('download_livestreams', models.BooleanField(default=False, help_text='Should Livestreams be downloaded?')),
                ('download_shorts', models.BooleanField(default=False, help_text='Should shorts be downloaded?')),
                ('index_livestreams', models.BooleanField(default=False, help_text='Should livestreams be indexed?')),
                ('index_shorts', models.BooleanField(default=True, help_text='Should shorts be indexed?')),
                ('last_scanned_livestreams', models.DateTimeField(blank=True, null=True)),
                ('last_scanned_shorts', models.DateTimeField(blank=True, null=True)),
                ('index_videos', models.BooleanField(default=True, help_text='Should videos be indexed?')),
                ('scanner_limit_livestreams', models.PositiveIntegerField(default=5, help_text='Limit how many livestreams the system scans every time for this channel, How many potential livestreams could this channel put out in a single day?')),
                ('scanner_limit_shorts', models.PositiveIntegerField(default=5, help_text='Limit how many shorts the system scans every time for this channel, How many potential shorts could this channel put out in a single day?')),
                ('send_download_notification', models.BooleanField(default=True)),
                ('slug', models.SlugField(allow_unicode=True, blank=True, max_length=255)),
                ('convert_videos_to_mp3', models.BooleanField(default=False)),
                ('fully_indexed', models.BooleanField(default=False)),
                ('allow_library_quality_upgrade', models.BooleanField(default=False, help_text='Changing the channel quality will cause all videos to redownload. Do you want this to happen?')),
                ('full_archive_after', models.DateTimeField(blank=True, help_text='Instead of full archiving right now, enable full archive after this date.', null=True)),
                ('duration_minimum_livestreams', models.PositiveIntegerField(default=0, help_text='Minimum duration in seconds of a livestream to download. Anything shorter than this will be skipped. 0 = disabled.', verbose_name='Duration Minimum For Livestreams (In Seconds)')),
                ('duration_minimum_videos', models.PositiveIntegerField(default=0, help_text='Minimum duration in seconds of a video to download. Anything shorter than this will be skipped. 0 = disabled.', verbose_name='Duration Minimum For Videos (In Seconds)')),
                ('duration_maximum_livestreams', models.PositiveIntegerField(default=0, help_text='Maximum duration in seconds of a livestream to download. Anything longer than this will be skipped. 0 = disabled.', verbose_name='Duration Maximum For Livestreams (In Seconds)')),
                ('duration_maximum_videos', models.PositiveIntegerField(default=0, help_text='Maximum duration in seconds of a video to download. Anything longer than this will be skipped. 0 = disabled.', verbose_name='Duration Maximum For Videos (In Seconds)')),
                ('uploader_id', models.CharField(blank=True, help_text='The @ style name of the channel', max_length=250)),
                ('full_archive_cutoff', models.DateField(blank=True, help_text='If full archive is enabled, only videos uploaded after this date will be downloaded.', null=True)),
                ('store_videos_in_separate_directories', models.BooleanField(default=True, help_text="Should videos be stored in separate directories for each video? Each directory will then contain the video file, info.json, and it's thumbnail.")),
                ('video_directory_schema', models.CharField(blank=True, max_length=500)),
                ('video_filename_schema', models.CharField(blank=True, max_length=500)),
                ('directory_schema', models.CharField(blank=True, max_length=500)),
                ('fully_indexed_livestreams', models.BooleanField(default=False)),
                ('fully_indexed_shorts', models.BooleanField(default=False)),
                ('display_name', models.CharField(blank=True, max_length=255)),
                ('skip_intro_duration', models.PositiveIntegerField(default=0, help_text='How many seconds of intro should be skipped?')),
                ('skip_outro_duration', models.PositiveIntegerField(default=0, help_text='How many seconds of outro should be skipped?')),
                ('full_index_after', models.DateTimeField(blank=True, help_text='Instead of fully indexing right now, trigger a full indexing scan after this date.', null=True)),
                ('skip_next_downloads', models.PositiveIntegerField(default=0, help_text='Skip next X number of downloads')),
                ('swap_index_livestreams_after', models.DateTimeField(blank=True, null=True)),
                ('swap_index_shorts_after', models.DateTimeField(blank=True, null=True)),
                ('swap_index_videos_after', models.DateTimeField(blank=True, null=True)),
                ('force_next_downloads', models.PositiveIntegerField(default=0, help_text='Force next X number of downloads')),
                ('delete_livestreams_after_days', models.PositiveIntegerField(default=0)),
                ('delete_shorts_after_days', models.PositiveIntegerField(default=0)),
                ('delete_videos_after_days', models.PositiveIntegerField(default=0)),
                ('watched_percentage', models.PositiveIntegerField(choices=[(50, '50%'), (55, '55%'), (60, '60%'), (65, '65%'), (70, '70%'), (75, '75%'), (80, '80%'), (85, '85%'), (90, '90%'), (95, '95%'), (100, '100%')], default=95, help_text='At what percentage of watching a video on this channel should the video be marked as watched.', validators=[vidar.helpers.channel_helpers.watched_percentage_minimum, vidar.helpers.channel_helpers.watched_percentage_maximum])),
                ('playback_volume', models.CharField(blank=True, choices=vidar.helpers.model_helpers.PlaybackVolume.choices, max_length=10)),
                ('mirror_playlists', models.BooleanField(default=False, help_text='Mirror all live playlists from this channel')),
                ('mirror_playlists_hidden', models.BooleanField(default=False, help_text='When adding a new playlist as a mirror, apply this checkbox value to the playlists hidden option.')),
                ('mirror_playlists_crontab', models.CharField(blank=True, choices=vidar.services.crontab_services.CrontabOptions.choices, help_text='When adding a new playlist as a mirror, apply a crontab that matches this type.', max_length=50)),
                ('sort_name', models.CharField(blank=True, help_text='The name to be used when sorting by name, if blank it will use display name, then name.', max_length=255)),
                ('delete_livestreams_after_watching', models.BooleanField(default=False, help_text='Delete livestreams once they has been watched?')),
                ('delete_shorts_after_watching', models.BooleanField(default=False, help_text='Delete shorts once they has been watched?')),
                ('delete_videos_after_watching', models.BooleanField(default=False, help_text='Delete videos once they has been watched?')),
                ('status', models.CharField(choices=vidar.helpers.channel_helpers.ChannelStatuses.choices, default=vidar.helpers.channel_helpers.ChannelStatuses.ACTIVE, max_length=50)),
                ('slow_full_archive', models.BooleanField(default=False, help_text='Enabling this setting will cause the system to download all possible videos for this channel regardless of other settings at a slower rate. To be used instead of Full Archive option.')),
                ('scan_after_datetime', models.DateTimeField(blank=True, help_text='A datetime representing the next time you wish to scan the channel, outside of the crontab schedule. Format: YYYY-MM-DD HH:MM', null=True)),
                ('block_rescan_window_in_hours', models.PositiveIntegerField(blank=True, help_text="If you manually scan a channel and the crontab tries to run within this many hours of the manual scan, don't rescan.", null=True)),
                ('mirror_playlists_restrict', models.BooleanField(default=False, help_text='Sets the playlists "Restrict to assigned channel" field value.')),
                ('check_videos_privacy_status', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, max_length=500, storage=vidar.storages.vidar_storage, upload_to=vidar.helpers.video_helpers.upload_to_file)),
                ('title', models.CharField(blank=True, max_length=500)),
                ('inserted', models.DateTimeField(blank=True, null=True)),
                ('updated', models.DateTimeField(blank=True, null=True)),
                ('provider_object_id', models.CharField(max_length=255)),
                ('audio', models.FileField(blank=True, max_length=500, storage=vidar.storages.vidar_storage, upload_to=vidar.helpers.video_helpers.upload_to_audio)),
                ('description', models.TextField(blank=True)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='videos', to='vidar.channel')),
                ('thumbnail', models.ImageField(blank=True, max_length=500, null=True, storage=vidar.storages.vidar_storage, upload_to=vidar.helpers.video_helpers.upload_to_thumbnail)),
                ('upload_date', models.DateField(blank=True, null=True)),
                ('force_download', models.BooleanField(default=False)),
                ('like_count', models.PositiveIntegerField(blank=True, null=True)),
                ('view_count', models.PositiveIntegerField(blank=True, null=True)),
                ('duration', models.IntegerField(blank=True, default=0)),
                ('watched', models.DateTimeField(blank=True, null=True)),
                ('date_added_to_system', models.DateTimeField(auto_now_add=True)),
                ('quality', models.PositiveIntegerField(blank=True, choices=vidar.models.PossibleQualities, help_text='To be set by Channel quality setting.', null=True)),
                ('date_downloaded', models.DateTimeField(blank=True, null=True)),
                ('is_livestream', models.BooleanField(default=False, help_text='Is this video under the Live tab for this channel?')),
                ('is_short', models.BooleanField(default=False, help_text='Is this video under the Shorts tab for this channel?')),
                ('is_video', models.BooleanField(default=False, help_text='Is this video under the Video tab for this channel?')),
                ('file_size', models.PositiveBigIntegerField(blank=True, null=True)),
                ('format_note', models.TextField(blank=True)),
                ('fps', models.IntegerField(default=0)),
                ('height', models.IntegerField(default=0)),
                ('width', models.IntegerField(default=0)),
                ('starred', models.DateTimeField(blank=True, null=True)),
                ('mark_for_deletion', models.BooleanField(default=False, help_text='Used when downloading music videos and not wanting to keep the resulting files beyond the daily maintenance task runtime.')),
                ('download_kwargs', models.JSONField(blank=True, encoder=vidar.json_encoders.JSONSetToListEncoder, null=True)),
                ('dlp_formats', models.JSONField(blank=True, null=True)),
                ('at_max_quality', models.BooleanField(default=False)),
                ('format_id', models.CharField(blank=True, max_length=255)),
                ('last_privacy_status_check', models.DateTimeField(blank=True, null=True)),
                ('privacy_status', models.CharField(choices=vidar.models.Video.VideoPrivacyStatuses.choices, default=vidar.models.Video.VideoPrivacyStatuses.PUBLIC, max_length=255)),
                ('channel_provider_object_id', models.CharField(blank=True, max_length=255)),
                ('info_json', models.FileField(blank=True, max_length=500, storage=vidar.storages.vidar_storage, upload_to=vidar.helpers.video_helpers.upload_to_infojson)),
                ('system_notes', models.JSONField(blank=True, default=dict, encoder=vidar.json_encoders.JSONSetToListEncoder)),
                ('description_locked', models.BooleanField(default=False)),
                ('title_locked', models.BooleanField(default=False)),
                ('prevent_deletion', models.BooleanField(default=False)),
                ('permit_download', models.BooleanField(default=True)),
                ('sort_ordering', models.PositiveIntegerField(default=0)),
                ('requested_max_quality', models.BooleanField(default=False, help_text='Tracks whether or not the system requested the max quality be downloaded. If at a later date the quality upgrades, this could catch those changes.')),
                ('playback_speed', models.CharField(blank=True, choices=vidar.helpers.model_helpers.PlaybackSpeed.choices, max_length=10)),
                ('playback_volume', models.CharField(blank=True, choices=vidar.helpers.model_helpers.PlaybackVolume.choices, max_length=10)),
                ('delete_after_watching', models.BooleanField(default=False, help_text='Delete video once it has been watched?')),
                ('download_comments_on_index', models.BooleanField(default=False)),
                ('convert_to_audio', models.BooleanField(default=False)),
                ('download_all_comments', models.BooleanField(default=False)),
                ('download_requested_by', models.CharField(blank=True, help_text='What triggered this video to download?', max_length=255)),
                ('privacy_status_checks', models.IntegerField(default=0)),
                ('file_not_found', models.BooleanField(default=False)),
                ('directory_schema', models.CharField(blank=True, max_length=500)),
                ('filename_schema', models.CharField(blank=True, max_length=500)),
            ],
            options={
                'ordering': ['-upload_date', '-inserted'],
                'permissions': [('play_videos', 'Can play video'), ('star_video', 'Can Star video')],
            },
        ),
        migrations.AddField(
            model_name='video',
            name='related',
            field=models.ManyToManyField(blank=True, to='vidar.video'),
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_scanned', models.DateTimeField(blank=True, null=True)),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('provider_object_id', models.CharField(blank=True, max_length=255)),
                ('title', models.CharField(blank=True, max_length=500)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('convert_to_audio', models.BooleanField(default=False, help_text='Create an mp3 file of the video?')),
                ('channel_provider_object_id', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('not_found_failures', models.PositiveIntegerField(default=0)),
                ('sync_deletions', models.BooleanField(default=False)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='playlists', to='vidar.channel')),
                ('quality', models.PositiveIntegerField(blank=True, choices=vidar.models.PossibleQualities, default=None, help_text='What minimum quality do you want these videos to be? Quality will be disabled automatically when the playlist is not enabled and all videos reach this quality selection. Videos that cannot reach this quality will be downloaded at the best available.', null=True)),
                ('disable_when_string_found_in_video_title', models.TextField(blank=True, help_text='Disable this playlist when this string is found in the a videos title. Case-insensitive e.g. finale. Spaces are preserved, one per line.')),
                ('title_skips', models.TextField(blank=True, help_text='If any of these words appear in the title, do not download the video. ONE PER LINE. i.e. #shorts', verbose_name='Skip DL by Title contains')),
                ('videos_display_ordering', models.CharField(choices=vidar.models.Playlist.PlaylistVideoOrderingChoices.choices, default=vidar.models.Playlist.PlaylistVideoOrderingChoices.DEFAULT, help_text='How do you want the videos in this playlist to be displayed?', max_length=255)),
                ('videos_playback_ordering', models.CharField(choices=vidar.models.Playlist.PlaylistVideoOrderingChoices.choices, default=vidar.models.Playlist.PlaylistVideoOrderingChoices.DEFAULT, help_text='How do you want the videos in this playlist to be played during automated playback?', max_length=255)),
                ('crontab', models.CharField(blank=True, help_text='minute, hour, day of month, month, day of week', max_length=50)),
                ('video_indexing_add_by_title', models.TextField(blank=True, help_text='When indexing videos, if the video title contains the following text, add it to this playlist. One match per line.')),
                ('video_indexing_add_by_title_limit_to_channels', models.ManyToManyField(blank=True, help_text='When indexing videos and attempting to match video titles, the video must be uploaded by these channels. Use CTRL+Click to select or de-select channels.', related_name='+', to='vidar.channel')),
                ('playback_speed', models.CharField(blank=True, choices=vidar.helpers.model_helpers.PlaybackSpeed.choices, max_length=10)),
                ('playback_volume', models.CharField(blank=True, choices=vidar.helpers.model_helpers.PlaybackVolume.choices, max_length=10)),
                ('hidden', models.BooleanField(default=False, help_text='Hide this playlist from list view. This also prevents the system from downloading any videos attached to it.')),
                ('download_comments_on_index', models.BooleanField(default=False)),
                ('provider_object_id_old', models.CharField(blank=True, help_text='System Internal ID. Used when converting playlist to custom and preventing user/mirroring from adding it again.', max_length=255)),
                ('restrict_to_assigned_channel', models.BooleanField(default=False, help_text='Videos on playlist must also be assigned to the same channel that the playlist is assigned to.')),
                ('remove_video_from_playlist_on_watched', models.BooleanField(default=False, help_text='Watch Later playlist allows videos to be auto-removed from list upon watching.')),
            ],
            options={
                'ordering': ['channel', 'title'],
            },
        ),
        migrations.CreateModel(
            name='PlaylistItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vidar.playlist')),
                ('provider_object_id', models.CharField(max_length=255)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vidar.video')),
                ('missing_from_playlist_on_provider', models.BooleanField(default=False)),
                ('display_order', positions.fields.PositionField(default=-1)),
                ('manually_added', models.BooleanField(default=False)),
                ('download', models.BooleanField(default=True)),
                ('wl_playlist', models.ForeignKey(blank=True, help_text='Internal system field, do not use. Links watch later item to a specific playlist.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='vidar.playlist')),
            ],
            options={
                'ordering': ['display_order'],
            },
        ),
        migrations.AddField(
            model_name='video',
            name='playlists',
            field=models.ManyToManyField(blank=True, related_name='videos', through='vidar.PlaylistItem', to='vidar.playlist'),
        ),
        migrations.CreateModel(
            name='VideoDownloadError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('traceback', models.TextField(blank=True)),
                ('kwargs', models.JSONField(blank=True, encoder=vidar.json_encoders.JSONSetToListEncoder, null=True)),
                ('quality', models.CharField(blank=True, max_length=255, null=True)),
                ('selected_quality', models.CharField(blank=True, max_length=255, null=True)),
                ('retries', models.PositiveIntegerField(default=0)),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='download_errors', to='vidar.video')),
            ],
            options={
                'ordering': ['-inserted'],
                'get_latest_by': 'inserted',
            },
        ),
        migrations.CreateModel(
            name='VideoNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField()),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='vidar.video')),
            ],
            options={
                'ordering': ['-inserted'],
            },
        ),
        migrations.CreateModel(
            name='VideoHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('old_title', models.CharField(blank=True, max_length=500)),
                ('new_title', models.CharField(blank=True, max_length=500)),
                ('old_description', models.TextField(blank=True)),
                ('new_description', models.TextField(blank=True)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='change_history', to='vidar.video')),
                ('new_privacy_status', models.TextField(blank=True)),
                ('old_privacy_status', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['-inserted'],
                'verbose_name': 'Video Change History',
                'verbose_name_plural': 'Video Change History',
            },
        ),
        migrations.CreateModel(
            name='Highlight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', models.PositiveIntegerField()),
                ('note', models.TextField(blank=True)),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='highlights', to='vidar.video')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='video_highlights', to=settings.AUTH_USER_MODEL)),
                ('end_point', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('source', models.CharField(choices=vidar.models.Highlight.Sources.choices, max_length=50)),
            ],
            options={
                'ordering': ['video', 'point'],
            },
        ),
        migrations.CreateModel(
            name='DurationSkip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.PositiveIntegerField()),
                ('end', models.PositiveIntegerField()),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duration_skips', to='vidar.video')),
                ('sb_category', models.CharField(blank=True, max_length=255)),
                ('sb_data', models.JSONField(blank=True, default=dict)),
                ('sb_uuid', models.CharField(blank=True, max_length=255)),
                ('sb_votes', models.IntegerField(blank=True, default=0)),
            ],
            options={
                'ordering': ['video', 'start'],
            },
        ),
        migrations.CreateModel(
            name='ScanHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('videos_downloaded', models.PositiveIntegerField(default=0)),
                ('shorts_downloaded', models.PositiveIntegerField(default=0)),
                ('livestreams_downloaded', models.PositiveIntegerField(default=0)),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scan_history', to='vidar.channel')),
                ('playlist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scan_history', to='vidar.playlist')),
            ],
            options={
                'ordering': ['-inserted'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('author', models.CharField(blank=True, max_length=500, null=True)),
                ('author_id', models.CharField(blank=True, max_length=255, null=True)),
                ('author_is_uploader', models.BooleanField(default=False)),
                ('author_thumbnail', models.CharField(blank=True, max_length=500, null=True)),
                ('parent_youtube_id', models.CharField(blank=True, max_length=255, null=True)),
                ('text', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('is_favorited', models.BooleanField(default=False)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='vidar.comment')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='vidar.video')),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RightsSupport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'permissions': (('access_vidar', 'General Access to Vidar'), ('view_index_download_stats', 'Index View - See Download Stats'), ('view_download_queue', 'View Download Queue'), ('view_update_details_queue', 'View Update Details Queue'), ('access_watch_later_playlist', 'Access Watch Later Functionality')),
                'managed': False,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='UserPlaybackHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seconds', models.PositiveBigIntegerField()),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_playback_history', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_playback_history', to='vidar.video')),
                ('playlist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='vidar.playlist')),
            ],
            options={
                'ordering': ['-updated'],
                'get_latest_by': ['updated'],
            },
        ),
        migrations.CreateModel(
            name='ExtraFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(max_length=500, storage=vidar.storages.vidar_storage, upload_to=vidar.helpers.extrafile_helpers.extrafile_file_upload_to)),
                ('note', models.TextField(blank=True)),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extra_files', to='vidar.video')),
            ],
        ),
        migrations.CreateModel(
            name='VideoBlocked',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider_object_id', models.CharField(max_length=255)),
                ('channel_id', models.CharField(blank=True, max_length=255)),
                ('title', models.CharField(blank=True, max_length=500)),
                ('inserted', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-inserted'],
            },
        ),
    ]
