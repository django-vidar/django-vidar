from django.urls import include, path

from vidar import views


channel_patterns = [
    path('', views.ChannelDetailView.as_view(), name='channel-details'),
    path('manage/', views.ChannelManageView.as_view(), name='channel-manage'),
    path('update/', views.channel_update_view, name='channel-update'),
    path('delete/', views.ChannelDeleteView.as_view(), name='channel-delete'),
    path('videos/delete/', views.ChannelDeleteVideosView.as_view(), name='channel-delete-videos'),
    path('videos/manager/', views.ChannelVideosManagerView.as_view(), name='channel-videos-manager'),
    path('rescan/', views.ChannelRescanView.as_view(), name='channel-rescan'),
    path('indexing/', views.ChannelIndexOnlyView.as_view(), name='channel-indexing-only'),
    path('swap/', views.ChannelBooleanSwapper.as_view(), name='channel-swap-booleans'),
    path('alter/int/', views.channel_alter_integer, name='channel-alter-ints'),
    path('playlists/live/', views.ChannelLivePlaylistsView.as_view(), name='channel-playlists-live'),
]

video_patterns = [
    path("", views.VideoDetailView.as_view(), name="video-detail"),
    path("delete/", views.VideoDeleteView.as_view(), name="video-delete"),
    path("convert/mp3/", views.video_convert_to_mp3, name="video-convert-to-audio"),
    path("download/<int:quality>/", views.download_video, name="video-download"),
    path("download/comments/", views.download_video_comments, name="video-download-comments"),
    path("watched/", views.VideoWatchedView.as_view(), name="video-watched"),
    path("update/", views.VideoUpdateView.as_view(), name="video-update"),
    path("update/qualities/", views.VideoUpdateAvailableQualitiesView.as_view(), name="video-update-qualities"),
    path("comment/add/", views.add_video_comment, name="video-comment-add"),
    path("swap/boolean/", views.VideoBooleanSwapper.as_view(), name="video-swap-booleans"),
    path("swap/datetime/", views.VideoDatetimeSwapper.as_view(), name="video-swap-datetime"),
    path("error/", views.VideoVideoDownloadErrorDetailView.as_view(), name="video-download-error"),
    path("related/", views.VideoRelatedVideosView.as_view(), name="video-related"),
    path("playlists/", views.VideoPlaylistsListView.as_view(), name="video-playlists"),
    path("playlists/add/", views.AddVideoToPlaylistView.as_view(), name="video-playlists-add"),
    path(
        "playlists/add/watch-later/",
        views.AddVideoToWatchLaterPlaylistView.as_view(),
        name="video-add-watch-later",
    ),
    path(
        "playlist/<int:playlist_pk>/remove/",
        views.RemoveVideoFromPlaylistView.as_view(),
        name="video-playlist-remove",
    ),
    path(
        "playlist/<int:playlist_pk>/disable/",
        views.DisableVideoFromPlaylistView.as_view(),
        name="video-playlist-disable",
    ),
    path("playlist/<int:playlist_pk>/order/", views.MoveVideoUpInPlaylistView.as_view(), name="video-playlist-order"),
    path("sub/channel/", views.video_sub_to_channel, name="video-sub-to-channel"),
    path('skips/', views.VideoDurationSkipsListView.as_view(), name='video-duration-skip-list'),
    path('highlights/', views.VideoHighlightsListView.as_view(), name='video-highlight-list'),
    path('chapters/', views.VideoChaptersListView.as_view(), name='video-chapter-list'),
    path('save-user-video-time/', views.video_save_user_current_view_time, name='video-save-user-view-time'),
    path('manage/', views.VideoManageView.as_view(), name='video-manage'),
]


app_name = "vidar"
urlpatterns = [
    path("", views.VideoListView.as_view(), name="index"),
    path("utilities/", views.GeneralUtilitiesView.as_view(), name="utilities"),
    path("notes/", views.VideoNoteListView.as_view(), name="notes"),
    path("statistics/", views.AllVideoStatistics.as_view(), name="statistics"),
    path("schedule/", views.ScheduleView.as_view(), name="schedule"),
    path("schedule/calendar/", views.ScheduleCalendarView.as_view(), name="schedule-calendar"),
    path('schedule/history/', views.ScheduleHistoryView.as_view(), name='schedule-history'),
    path("highlights/", views.HighlightListView.as_view(), name="highlights"),
    path("watch/history/", views.WatchHistoryListView.as_view(), name="watch-history"),
    path("watch/history/<int:pk>/delete/", views.WatchHistoryDelete.as_view(), name="watch-history-delete"),
    path("watch/later/", views.PlaylistWatchLaterView.as_view(), name="watch-later"),
    path("queue/downloads/", views.download_queue, name="queue"),
    path("queue/details/", views.update_video_details_queue, name="queue-video-details"),
    path("video/", views.VideoListView.as_view(), name="video-index"),
    path("video/create/", views.VideoRequestView.as_view(), name="video-create"),
    path('video/<int:pk>/', include(video_patterns)),
    path('video/<str:provider_object_id>/', include(video_patterns)),
    path('channels/', views.ChannelListView.as_view(), name='channel-index'),
    path('crontab/catchup/', views.CrontabCatchupView.as_view(), name='crontab-catchup'),
    path('channels/create/', views.channel_add_view, name='channel-create'),
    path('channels/bulk/', views.update_channels_bulk, name='channel-bulk-update'),
    path('channels/<int:pk>/', include(channel_patterns)),
    path('channels/<slug:slug>/', include(channel_patterns)),
    path('htmx/crontab/', views.generate_crontab, name='htmx-crontab-generate'),
    path("playlists/", views.PlaylistListView.as_view(), name="playlist-index"),
    path("playlists/create/", views.PlaylistCreateView.as_view(), name="playlist-create"),
    path("playlists/create/custom/", views.PlaylistCustomCreateView.as_view(), name="playlist-create-custom"),
    path("playlists/<int:pk>/", views.PlaylistDetailView.as_view(), name="playlist-detail"),
    path("playlists/<int:pk>/edit/", views.PlaylistEditView.as_view(), name="playlist-edit"),
    path("playlists/<int:pk>/delete/", views.PlaylistDeleteView.as_view(), name="playlist-delete"),
    path("playlists/<int:pk>/scan/", views.PlaylistScanView.as_view(), name="playlist-scan"),
    path('playlists/<int:pk>/swap/', views.PlaylistBooleanSwapper.as_view(), name='playlist-swap-booleans'),
    path('playlists/<int:pk>/search/add/', views.PlaylistAddVideosBySearch.as_view(), name='playlist-add-by-search'),
    path('history/changelog/', views.VideoHistoryListView.as_view(), name='history-videos'),
    path("history/errors/", views.VideoDownloadErrorListView.as_view(), name="history-video-download-errors"),
    path("highlights/<int:pk>/", views.HighlightUpdateView.as_view(), name='highlights-update'),
    path("chapters/<int:pk>/", views.ChapterUpdateView.as_view(), name='chapters-update'),
    path("blocked/", views.VideoBlockedListView.as_view(), name='blocked-index'),
    path("blocked/<int:pk>/unblock/", views.VideoBlockedDeleteView.as_view(), name='blocked-delete'),
]
